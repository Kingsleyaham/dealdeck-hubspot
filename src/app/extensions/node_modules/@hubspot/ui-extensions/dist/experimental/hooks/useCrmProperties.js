import { useEffect, useState } from 'react';
import { logger } from '../../logger';
import { fetchCrmProperties } from '../crm/fetchCrmProperties';
/**
 * A hook for using and managing CRM properties.
 *
 * @experimental This hook is experimental and might change or be removed in future versions.
 */
export function useCrmProperties(propertyNames) {
    const [properties, setProperties] = useState({});
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);
    // Log experimental warning once on mount
    useEffect(() => {
        logger.warn('useCrmProperties is an experimental hook and might change or be removed in the future.');
    }, []);
    const propertiesUpdatedCallback = (newProperties) => {
        setProperties(newProperties);
    };
    // Fetch the properties
    useEffect(() => {
        (async () => {
            try {
                const propertyData = await fetchCrmProperties(propertyNames, propertiesUpdatedCallback);
                setProperties(propertyData);
                setError(null);
            }
            catch (err) {
                const errorData = err instanceof Error
                    ? err
                    : new Error('Failed to fetch CRM properties');
                setError(errorData);
                setProperties({});
            }
            finally {
                setIsLoading(false);
            }
        })().catch((err) => {
            setError(err);
            setProperties({});
            setIsLoading(false);
        });
    }, [propertyNames]);
    return {
        properties,
        error,
        isLoading,
    };
}
